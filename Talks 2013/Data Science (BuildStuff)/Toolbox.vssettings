<UserSettings><ApplicationIdentity version="12.0"/><ToolsOptions/><Category name="Environment_Group" RegisteredName="Environment_Group"><Category name="Environment_Toolbox" Category="{481999F2-7479-4e03-83D5-BE808BA142DF}" Package="{DA9FB551-C724-11d0-AE1F-00A0C90FFFC3}" RegisteredName="Environment_Toolbox" PackageName="Visual Studio Environment Package"><PropertyValue name="ShowAllTabs">false</PropertyValue><PropertyValue name="Version">1</PropertyValue><PropertyValue name="DeletedTabCount">0</PropertyValue><PropertyValue name="Tab0.ID">2 The World</PropertyValue><PropertyValue name="Tab0.Name">1 The World</PropertyValue><PropertyValue name="Tab0.View">0</PropertyValue><PropertyValue name="Tab0.UseDefaultName">false</PropertyValue><PropertyValue name="Tab0.RecordType">1</PropertyValue><PropertyValue name="Tab0.Position">43</PropertyValue><PropertyValue name="Tab0.OriginalName">2 The World</PropertyValue><PropertyValue name="Tab1.ID">2 World Bank</PropertyValue><PropertyValue name="Tab1.Name">2 World Bank</PropertyValue><PropertyValue name="Tab1.View">0</PropertyValue><PropertyValue name="Tab1.UseDefaultName">false</PropertyValue><PropertyValue name="Tab1.RecordType">1</PropertyValue><PropertyValue name="Tab1.Position">44</PropertyValue><PropertyValue name="Tab1.OriginalName">2 World Bank</PropertyValue><PropertyValue name="Tab2.ID">3 Presidents</PropertyValue><PropertyValue name="Tab2.Name">3 Presidents</PropertyValue><PropertyValue name="Tab2.View">0</PropertyValue><PropertyValue name="Tab2.UseDefaultName">true</PropertyValue><PropertyValue name="Tab2.RecordType">1</PropertyValue><PropertyValue name="Tab2.Position">45</PropertyValue><PropertyValue name="Tab3.Name">Advertising</PropertyValue><PropertyValue name="Tab3.View">0</PropertyValue><PropertyValue name="Tab3.UseDefaultName">true</PropertyValue><PropertyValue name="Tab3.RecordType">4</PropertyValue><PropertyValue name="Tab3.Position">46</PropertyValue><PropertyValue name="Tab4.ID">MSVSTORibbonV11</PropertyValue><PropertyValue name="Tab4.Name">Office Ribbon Controls</PropertyValue><PropertyValue name="Tab4.View">0</PropertyValue><PropertyValue name="Tab4.UseDefaultName">true</PropertyValue><PropertyValue name="Tab4.RecordType">4</PropertyValue><PropertyValue name="Tab4.Position">56</PropertyValue><PropertyValue name="Tab5.ID">Control Flow</PropertyValue><PropertyValue name="Tab5.Name">Control Flow</PropertyValue><PropertyValue name="Tab5.View">0</PropertyValue><PropertyValue name="Tab5.UseDefaultName">true</PropertyValue><PropertyValue name="Tab5.RecordType">4</PropertyValue><PropertyValue name="Tab5.Position">68</PropertyValue><PropertyValue name="Tab6.ID">{e7f851c8-6267-4794-b0fe-7bcab6dacbb4}-#1071</PropertyValue><PropertyValue name="Tab6.Name">Standard</PropertyValue><PropertyValue name="Tab6.View">0</PropertyValue><PropertyValue name="Tab6.UseDefaultName">true</PropertyValue><PropertyValue name="Tab6.RecordType">4</PropertyValue><PropertyValue name="Tab6.Position">69</PropertyValue><PropertyValue name="TabCount">7</PropertyValue><PropertyValue name="DeletedItemCount">0</PropertyValue><PropertyValue name="Item0.DataProvider">{0A057BAD-6706-45D2-A800-683A29EC6BA3}</PropertyValue><PropertyValue name="Item0.ID">18DEA47A7DF107D5F70C1A7080DE7382</PropertyValue><PropertyValue name="Item0.Name">Text: let countries = [
  wb.Countries.China;
  wb.Countries.``United States``;
  wb.Countries.``United Kingdom``;
  wb.Countries.France;
  wb.Countries.``Czech Republic``
  wb.Countries.Brazil;
  wb.Countries.``Russian Federation``
  wb.Countries.Japan;
  wb.Countries.``South Africa``;
  wb.Countries.Germany;
  wb.Countries.Lithuania;
  wb.Countries.Mexico; ]</PropertyValue><PropertyValue name="Item0.UseDefaultName">true</PropertyValue><PropertyValue name="Item0.Tab">2 The World</PropertyValue><PropertyValue name="Item0.TabID">2 The World</PropertyValue><PropertyValue name="Item0.OriginalTabID">2 The World</PropertyValue><PropertyValue name="Item0.OriginalTab">1 The World</PropertyValue><PropertyValue name="Item0.RecordType">1</PropertyValue><PropertyValue name="Item0.Data">let countries = [
  wb.Countries.China;
  wb.Countries.``United States``;
  wb.Countries.``United Kingdom``;
  wb.Countries.France;
  wb.Countries.``Czech Republic``
  wb.Countries.Brazil;
  wb.Countries.``Russian Federation``
  wb.Countries.Japan;
  wb.Countries.``South Africa``;
  wb.Countries.Germany;
  wb.Countries.Lithuania;
  wb.Countries.Mexico; ]</PropertyValue><PropertyValue name="Item0.Position">1</PropertyValue><PropertyValue name="Item1.DataProvider">{0A057BAD-6706-45D2-A800-683A29EC6BA3}</PropertyValue><PropertyValue name="Item1.ID">FC81B7BAFCA8EDF2192F209DB5316F85</PropertyValue><PropertyValue name="Item1.Name">Text: // ----------------------------------------------------------------------------
// Get temperature information for all the countries
// ----------------------------------------------------------------------------

// TODO: Get capital cities from the WorldBank

// TODO: Get weather information using
// http://api.openweathermap.org/data/2.5/weather?units=metric&amp;q=Prague

// TODO: Print country &amp; temperature, write getTemp
// TODO: Get temperature in capitals as a series

// ----------------------------------------------------------------------------
// Get additional information from the world bank
// ----------------------------------------------------------------------------

// TODO: Get GDP of Czech Republic in 2000
// TODO: Build data frame with temperatures (info)

// TODO: Add GDP column for all countries
// DEMO: Add additional columns

// ----------------------------------------------------------------------------
// Visualize data with the R type provider
// ----------------------------------------------------------------------------

// TODO: Visualize data using 'graphics' 'plot'
</PropertyValue><PropertyValue name="Item1.UseDefaultName">true</PropertyValue><PropertyValue name="Item1.Tab">2 The World</PropertyValue><PropertyValue name="Item1.TabID">2 The World</PropertyValue><PropertyValue name="Item1.OriginalTabID">2 The World</PropertyValue><PropertyValue name="Item1.OriginalTab">1 The World</PropertyValue><PropertyValue name="Item1.RecordType">1</PropertyValue><PropertyValue name="Item1.Data">// ----------------------------------------------------------------------------
// Get temperature information for all the countries
// ----------------------------------------------------------------------------

// TODO: Get capital cities from the WorldBank

// TODO: Get weather information using
// http://api.openweathermap.org/data/2.5/weather?units=metric&amp;q=Prague

// TODO: Print country &amp; temperature, write getTemp
// TODO: Get temperature in capitals as a series

// ----------------------------------------------------------------------------
// Get additional information from the world bank
// ----------------------------------------------------------------------------

// TODO: Get GDP of Czech Republic in 2000
// TODO: Build data frame with temperatures (info)

// TODO: Add GDP column for all countries
// DEMO: Add additional columns

// ----------------------------------------------------------------------------
// Visualize data with the R type provider
// ----------------------------------------------------------------------------

// TODO: Visualize data using 'graphics' 'plot'
</PropertyValue><PropertyValue name="Item1.Position">2</PropertyValue><PropertyValue name="Item2.DataProvider">{0A057BAD-6706-45D2-A800-683A29EC6BA3}</PropertyValue><PropertyValue name="Item2.ID">37CF8B9ABDED2875C0C439F1DAB4C232</PropertyValue><PropertyValue name="Item2.Name">Text: // BACKUP (offline version)    
series
 [ "China"              =&gt; 10 
   "United States"      =&gt; 4  
   "United Kingdom"     =&gt; 7  
   "France"             =&gt; 5  
   "Czech Republic"     =&gt; -2 
   "Brazil"             =&gt; 22 
   "Russian Federation" =&gt; 1  
   "Japan"              =&gt; 10 
   "South Africa"       =&gt; 19 
   "Germany"            =&gt; 1  
   "Mexico"             =&gt; 11 ]
</PropertyValue><PropertyValue name="Item2.UseDefaultName">true</PropertyValue><PropertyValue name="Item2.Tab">2 The World</PropertyValue><PropertyValue name="Item2.TabID">2 The World</PropertyValue><PropertyValue name="Item2.OriginalTabID">2 The World</PropertyValue><PropertyValue name="Item2.OriginalTab">1 The World</PropertyValue><PropertyValue name="Item2.RecordType">1</PropertyValue><PropertyValue name="Item2.Data">// BACKUP (offline version)    
series
 [ "China"              =&gt; 10 
   "United States"      =&gt; 4  
   "United Kingdom"     =&gt; 7  
   "France"             =&gt; 5  
   "Czech Republic"     =&gt; -2 
   "Brazil"             =&gt; 22 
   "Russian Federation" =&gt; 1  
   "Japan"              =&gt; 10 
   "South Africa"       =&gt; 19 
   "Germany"            =&gt; 1  
   "Mexico"             =&gt; 11 ]
</PropertyValue><PropertyValue name="Item2.Position">3</PropertyValue><PropertyValue name="Item3.DataProvider">{0A057BAD-6706-45D2-A800-683A29EC6BA3}</PropertyValue><PropertyValue name="Item3.ID">68B8E36997C993711A38AE372FE4E49A</PropertyValue><PropertyValue name="Item3.Name">Text: // BACKUP: Combined chart
Chart.Combine(
  [ for c in countries -&gt;
      Chart.Line(c.Indicators.``School enrollment, tertiary (% gross)``, c.Name) 
  ]).WithLegend()
</PropertyValue><PropertyValue name="Item3.UseDefaultName">true</PropertyValue><PropertyValue name="Item3.Tab">2 The World</PropertyValue><PropertyValue name="Item3.TabID">2 The World</PropertyValue><PropertyValue name="Item3.OriginalTabID">2 The World</PropertyValue><PropertyValue name="Item3.OriginalTab">1 The World</PropertyValue><PropertyValue name="Item3.RecordType">1</PropertyValue><PropertyValue name="Item3.Data">// BACKUP: Combined chart
Chart.Combine(
  [ for c in countries -&gt;
      Chart.Line(c.Indicators.``School enrollment, tertiary (% gross)``, c.Name) 
  ]).WithLegend()
</PropertyValue><PropertyValue name="Item3.Position">4</PropertyValue><PropertyValue name="Item4.DataProvider">{0A057BAD-6706-45D2-A800-683A29EC6BA3}</PropertyValue><PropertyValue name="Item4.ID">4221D308A7E2646EEDF9049AAD68C55C</PropertyValue><PropertyValue name="Item4.Name">Text: info?Growth &lt;- [ for c in countries -&gt; c.Indicators.``GDP per capita growth (annual %)``.[2000] ]
info?Population &lt;- [ for c in countries -&gt; c.Indicators.``Population (Total)``.[2000] ]
info?Pollution &lt;- [ for c in countries -&gt; c.Indicators.``CO2 emissions (kg per PPP $ of GDP)``.[2000] ]
info?Gender &lt;- [ for c in countries -&gt; c.Indicators.``Employment to population ratio, 15+, female (%)``.[2000] ]
</PropertyValue><PropertyValue name="Item4.UseDefaultName">true</PropertyValue><PropertyValue name="Item4.Tab">2 The World</PropertyValue><PropertyValue name="Item4.TabID">2 The World</PropertyValue><PropertyValue name="Item4.OriginalTabID">2 The World</PropertyValue><PropertyValue name="Item4.OriginalTab">1 The World</PropertyValue><PropertyValue name="Item4.RecordType">1</PropertyValue><PropertyValue name="Item4.Data">info?Growth &lt;- [ for c in countries -&gt; c.Indicators.``GDP per capita growth (annual %)``.[2000] ]
info?Population &lt;- [ for c in countries -&gt; c.Indicators.``Population (Total)``.[2000] ]
info?Pollution &lt;- [ for c in countries -&gt; c.Indicators.``CO2 emissions (kg per PPP $ of GDP)``.[2000] ]
info?Gender &lt;- [ for c in countries -&gt; c.Indicators.``Employment to population ratio, 15+, female (%)``.[2000] ]
</PropertyValue><PropertyValue name="Item4.Position">5</PropertyValue><PropertyValue name="Item5.DataProvider">{0A057BAD-6706-45D2-A800-683A29EC6BA3}</PropertyValue><PropertyValue name="Item5.ID">CF093F3BB7BFC33DEF3334617B09807A</PropertyValue><PropertyValue name="Item5.Name">Text:   |&gt; Frame.indexRowsInt "Year"
  |&gt; Frame.indexColsWith ["Year"; "GDP"; "Population"; "Debt"; "?" ]
</PropertyValue><PropertyValue name="Item5.UseDefaultName">true</PropertyValue><PropertyValue name="Item5.Tab">3 Presidents</PropertyValue><PropertyValue name="Item5.TabID">3 Presidents</PropertyValue><PropertyValue name="Item5.OriginalTabID">3 Presidents</PropertyValue><PropertyValue name="Item5.OriginalTab">3 Presidents</PropertyValue><PropertyValue name="Item5.RecordType">1</PropertyValue><PropertyValue name="Item5.Data">  |&gt; Frame.indexRowsInt "Year"
  |&gt; Frame.indexColsWith ["Year"; "GDP"; "Population"; "Debt"; "?" ]
</PropertyValue><PropertyValue name="Item5.Position">1</PropertyValue><PropertyValue name="Item6.DataProvider">{0A057BAD-6706-45D2-A800-683A29EC6BA3}</PropertyValue><PropertyValue name="Item6.ID">C9C90324D8C905EFD7D912B4B15E0F65</PropertyValue><PropertyValue name="Item6.Name">Text: [ for (KeyValue(year, v)) in debtData?GDP.Observations  do
    yield year, v, "UsDebt", 50.0
  for (KeyValue(year, v)) in debtData?GDP_WB.Observations do
    yield year, v, "WorldBank", 20.0 ]
|&gt; Vega.Scatter
</PropertyValue><PropertyValue name="Item6.UseDefaultName">true</PropertyValue><PropertyValue name="Item6.Tab">3 Presidents</PropertyValue><PropertyValue name="Item6.TabID">3 Presidents</PropertyValue><PropertyValue name="Item6.OriginalTabID">3 Presidents</PropertyValue><PropertyValue name="Item6.OriginalTab">3 Presidents</PropertyValue><PropertyValue name="Item6.RecordType">1</PropertyValue><PropertyValue name="Item6.Data">[ for (KeyValue(year, v)) in debtData?GDP.Observations  do
    yield year, v, "UsDebt", 50.0
  for (KeyValue(year, v)) in debtData?GDP_WB.Observations do
    yield year, v, "WorldBank", 20.0 ]
|&gt; Vega.Scatter
</PropertyValue><PropertyValue name="Item6.Position">2</PropertyValue><PropertyValue name="Item7.DataProvider">{0A057BAD-6706-45D2-A800-683A29EC6BA3}</PropertyValue><PropertyValue name="Item7.ID">FC0B9B3DCC65DD700DA6DF0644E72959</PropertyValue><PropertyValue name="Item7.Name">Text: let presidentInfos = 
  query { for p in fb.Society.Government.``US Presidents`` do
          sortBy (Seq.max p.``President number``)
          skip 23 }
</PropertyValue><PropertyValue name="Item7.UseDefaultName">true</PropertyValue><PropertyValue name="Item7.Tab">3 Presidents</PropertyValue><PropertyValue name="Item7.TabID">3 Presidents</PropertyValue><PropertyValue name="Item7.OriginalTabID">3 Presidents</PropertyValue><PropertyValue name="Item7.OriginalTab">3 Presidents</PropertyValue><PropertyValue name="Item7.RecordType">1</PropertyValue><PropertyValue name="Item7.Data">let presidentInfos = 
  query { for p in fb.Society.Government.``US Presidents`` do
          sortBy (Seq.max p.``President number``)
          skip 23 }
</PropertyValue><PropertyValue name="Item7.Position">3</PropertyValue><PropertyValue name="Item8.DataProvider">{0A057BAD-6706-45D2-A800-683A29EC6BA3}</PropertyValue><PropertyValue name="Item8.ID">2F2910A168FC76CD8A0AFE4C3C3E8432</PropertyValue><PropertyValue name="Item8.Name">Text: // Get list of pres
let presidentTerms =
  [ for pres in presidentInfos do
    for pos in pres.``Government Positions Held`` do
    if string pos.``Basic title`` = "President" then
      // Get start and end year of the position
      let starty = DateTime.Parse(pos.From).Year
      let endy = if pos.To = null then 2013 else
                   DateTime.Parse(pos.To).Year
      // Get their party
      let dem = pres.Party |&gt; Seq.exists (fun p -&gt; p.Party.Name = "Democratic Party")
      let rep = pres.Party |&gt; Seq.exists (fun p -&gt; p.Party.Name = "Republican Party")
      let pty = if dem then "Democrat" elif rep then "Republican" else null
      // Return three element tuple with the info
      yield (pres.Name, starty, endy, pty) ]
</PropertyValue><PropertyValue name="Item8.UseDefaultName">true</PropertyValue><PropertyValue name="Item8.Tab">3 Presidents</PropertyValue><PropertyValue name="Item8.TabID">3 Presidents</PropertyValue><PropertyValue name="Item8.OriginalTabID">3 Presidents</PropertyValue><PropertyValue name="Item8.OriginalTab">3 Presidents</PropertyValue><PropertyValue name="Item8.RecordType">1</PropertyValue><PropertyValue name="Item8.Data">// Get list of pres
let presidentTerms =
  [ for pres in presidentInfos do
    for pos in pres.``Government Positions Held`` do
    if string pos.``Basic title`` = "President" then
      // Get start and end year of the position
      let starty = DateTime.Parse(pos.From).Year
      let endy = if pos.To = null then 2013 else
                   DateTime.Parse(pos.To).Year
      // Get their party
      let dem = pres.Party |&gt; Seq.exists (fun p -&gt; p.Party.Name = "Democratic Party")
      let rep = pres.Party |&gt; Seq.exists (fun p -&gt; p.Party.Name = "Republican Party")
      let pty = if dem then "Democrat" elif rep then "Republican" else null
      // Return three element tuple with the info
      yield (pres.Name, starty, endy, pty) ]
</PropertyValue><PropertyValue name="Item8.Position">4</PropertyValue><PropertyValue name="Item9.DataProvider">{0A057BAD-6706-45D2-A800-683A29EC6BA3}</PropertyValue><PropertyValue name="Item9.ID">08CE30AE521B35FE3608BF0F358B2067</PropertyValue><PropertyValue name="Item9.Name">Text:   |&gt; Frame.indexColsWith ["President"; "Start"; "End"; "Party"]
</PropertyValue><PropertyValue name="Item9.UseDefaultName">true</PropertyValue><PropertyValue name="Item9.Tab">3 Presidents</PropertyValue><PropertyValue name="Item9.TabID">3 Presidents</PropertyValue><PropertyValue name="Item9.OriginalTabID">3 Presidents</PropertyValue><PropertyValue name="Item9.OriginalTab">3 Presidents</PropertyValue><PropertyValue name="Item9.RecordType">1</PropertyValue><PropertyValue name="Item9.Data">  |&gt; Frame.indexColsWith ["President"; "Start"; "End"; "Party"]
</PropertyValue><PropertyValue name="Item9.Position">5</PropertyValue><PropertyValue name="Item10.DataProvider">{0A057BAD-6706-45D2-A800-683A29EC6BA3}</PropertyValue><PropertyValue name="Item10.ID">3BE775D1167163F235CEB4AF6CACC5B2</PropertyValue><PropertyValue name="Item10.Name">Text: // Get debt at the end of the presidential term
let byEnd = presidents |&gt; Frame.indexRowsInt "End"
let endDebt = byEnd.Join(debt, JoinKind.Left)

// Total accumulated debt by president
Vega.BarColor(endDebt, x="End", y="Debt")
</PropertyValue><PropertyValue name="Item10.UseDefaultName">true</PropertyValue><PropertyValue name="Item10.Tab">3 Presidents</PropertyValue><PropertyValue name="Item10.TabID">3 Presidents</PropertyValue><PropertyValue name="Item10.OriginalTabID">3 Presidents</PropertyValue><PropertyValue name="Item10.OriginalTab">3 Presidents</PropertyValue><PropertyValue name="Item10.RecordType">1</PropertyValue><PropertyValue name="Item10.Data">// Get debt at the end of the presidential term
let byEnd = presidents |&gt; Frame.indexRowsInt "End"
let endDebt = byEnd.Join(debt, JoinKind.Left)

// Total accumulated debt by president
Vega.BarColor(endDebt, x="End", y="Debt")
</PropertyValue><PropertyValue name="Item10.Position">6</PropertyValue><PropertyValue name="Item11.DataProvider">{0A057BAD-6706-45D2-A800-683A29EC6BA3}</PropertyValue><PropertyValue name="Item11.ID">618200472336E91BDB19D5B58DBE811D</PropertyValue><PropertyValue name="Item11.Name">Text: // BACKUP
Vega.BarColor(endDebt, x="End", y="Debt", color="Party")
Vega.BarColor(endDebt, x="End", y="Debt", color="President")
</PropertyValue><PropertyValue name="Item11.UseDefaultName">true</PropertyValue><PropertyValue name="Item11.Tab">3 Presidents</PropertyValue><PropertyValue name="Item11.TabID">3 Presidents</PropertyValue><PropertyValue name="Item11.OriginalTabID">3 Presidents</PropertyValue><PropertyValue name="Item11.OriginalTab">3 Presidents</PropertyValue><PropertyValue name="Item11.RecordType">1</PropertyValue><PropertyValue name="Item11.Data">// BACKUP
Vega.BarColor(endDebt, x="End", y="Debt", color="Party")
Vega.BarColor(endDebt, x="End", y="Debt", color="President")
</PropertyValue><PropertyValue name="Item11.Position">7</PropertyValue><PropertyValue name="Item12.DataProvider">{0A057BAD-6706-45D2-A800-683A29EC6BA3}</PropertyValue><PropertyValue name="Item12.ID">BB9EB4133CED70E8281EB2A73826FD36</PropertyValue><PropertyValue name="Item12.Name">Text: // Group by Party &amp; calculate average change
let byParty = 
  endDebt
  |&gt; Frame.groupRowsByString "Party"
  |&gt; Frame.meanLevel fst

// Add Party names &amp; visualize 
byParty?Party &lt;- byParty.RowKeys
Vega.BarColor(byParty, y="Difference", color="Party")
</PropertyValue><PropertyValue name="Item12.UseDefaultName">true</PropertyValue><PropertyValue name="Item12.Tab">3 Presidents</PropertyValue><PropertyValue name="Item12.TabID">3 Presidents</PropertyValue><PropertyValue name="Item12.OriginalTabID">3 Presidents</PropertyValue><PropertyValue name="Item12.OriginalTab">3 Presidents</PropertyValue><PropertyValue name="Item12.RecordType">1</PropertyValue><PropertyValue name="Item12.Data">// Group by Party &amp; calculate average change
let byParty = 
  endDebt
  |&gt; Frame.groupRowsByString "Party"
  |&gt; Frame.meanLevel fst

// Add Party names &amp; visualize 
byParty?Party &lt;- byParty.RowKeys
Vega.BarColor(byParty, y="Difference", color="Party")
</PropertyValue><PropertyValue name="Item12.Position">8</PropertyValue><PropertyValue name="Item13.DataProvider">{0A057BAD-6706-45D2-A800-683A29EC6BA3}</PropertyValue><PropertyValue name="Item13.ID">DCA601B7A01CC8D612CC32E1174C99AF</PropertyValue><PropertyValue name="Item13.Name">Text: // For each year, find the corresponding president and party
let byStart = presidents |&gt; Frame.indexRowsInt "Start"
let aligned = debt.Join(byStart, JoinKind.Left, Lookup.NearestSmaller)

// Bar chart displaying debt per president per year 
Vega.BarColor(aligned, y="Debt", color="President")  

// Bar chart displaying debt per party per year 
Vega.BarColor(aligned, y="Debt", color="Party") 


</PropertyValue><PropertyValue name="Item13.UseDefaultName">true</PropertyValue><PropertyValue name="Item13.Tab">3 Presidents</PropertyValue><PropertyValue name="Item13.TabID">3 Presidents</PropertyValue><PropertyValue name="Item13.OriginalTabID">3 Presidents</PropertyValue><PropertyValue name="Item13.OriginalTab">3 Presidents</PropertyValue><PropertyValue name="Item13.RecordType">1</PropertyValue><PropertyValue name="Item13.Data">// For each year, find the corresponding president and party
let byStart = presidents |&gt; Frame.indexRowsInt "Start"
let aligned = debt.Join(byStart, JoinKind.Left, Lookup.NearestSmaller)

// Bar chart displaying debt per president per year 
Vega.BarColor(aligned, y="Debt", color="President")  

// Bar chart displaying debt per party per year 
Vega.BarColor(aligned, y="Debt", color="Party") 


</PropertyValue><PropertyValue name="Item13.Position">9</PropertyValue><PropertyValue name="Item14.DataProvider">{0A057BAD-6706-45D2-A800-683A29EC6BA3}</PropertyValue><PropertyValue name="Item14.ID">49EF128DEF2343220E5433E80352E91B</PropertyValue><PropertyValue name="Item14.Name">Text: type WorldBank = WorldBankDataProvider&lt;"World Development Indicators", Asynchronous=true&gt;

type j = TypeScript.Api&lt;"C:/Typings/jquery.d.ts"&gt;
type h = TypeScript.Api&lt;"C:/Typings/highcharts.d.ts"&gt;

let jQuery (command:string) = j.jQuery.Invoke(command)
</PropertyValue><PropertyValue name="Item14.UseDefaultName">true</PropertyValue><PropertyValue name="Item14.Tab">2 World Bank</PropertyValue><PropertyValue name="Item14.TabID">2 World Bank</PropertyValue><PropertyValue name="Item14.OriginalTabID">2 World Bank</PropertyValue><PropertyValue name="Item14.OriginalTab">2 World Bank</PropertyValue><PropertyValue name="Item14.RecordType">1</PropertyValue><PropertyValue name="Item14.Data">type WorldBank = WorldBankDataProvider&lt;"World Development Indicators", Asynchronous=true&gt;

type j = TypeScript.Api&lt;"C:/Typings/jquery.d.ts"&gt;
type h = TypeScript.Api&lt;"C:/Typings/highcharts.d.ts"&gt;

let jQuery (command:string) = j.jQuery.Invoke(command)
</PropertyValue><PropertyValue name="Item14.Position">1</PropertyValue><PropertyValue name="Item15.DataProvider">{0A057BAD-6706-45D2-A800-683A29EC6BA3}</PropertyValue><PropertyValue name="Item15.ID">4FD0453C52B81C3334DBBCF6C2FAC808</PropertyValue><PropertyValue name="Item15.Name">Text: let wb = WorldBank.GetDataContext()

let countries () =[|
  wb.Countries.China;
  wb.Countries.``United States``;
  wb.Countries.``United Kingdom``;
  wb.Countries.France;
  wb.Countries.``Czech Republic``
  wb.Countries.Brazil;
  wb.Countries.``Russian Federation``
  wb.Countries.Japan;
  wb.Countries.``South Africa``;
  wb.Countries.Germany;
  wb.Countries.Lithuania;
  wb.Countries.Mexico; |]
</PropertyValue><PropertyValue name="Item15.UseDefaultName">true</PropertyValue><PropertyValue name="Item15.Tab">2 World Bank</PropertyValue><PropertyValue name="Item15.TabID">2 World Bank</PropertyValue><PropertyValue name="Item15.OriginalTabID">2 World Bank</PropertyValue><PropertyValue name="Item15.OriginalTab">2 World Bank</PropertyValue><PropertyValue name="Item15.RecordType">1</PropertyValue><PropertyValue name="Item15.Data">let wb = WorldBank.GetDataContext()

let countries () =[|
  wb.Countries.China;
  wb.Countries.``United States``;
  wb.Countries.``United Kingdom``;
  wb.Countries.France;
  wb.Countries.``Czech Republic``
  wb.Countries.Brazil;
  wb.Countries.``Russian Federation``
  wb.Countries.Japan;
  wb.Countries.``South Africa``;
  wb.Countries.Germany;
  wb.Countries.Lithuania;
  wb.Countries.Mexico; |]
</PropertyValue><PropertyValue name="Item15.Position">2</PropertyValue><PropertyValue name="Item16.DataProvider">{0A057BAD-6706-45D2-A800-683A29EC6BA3}</PropertyValue><PropertyValue name="Item16.ID">934DF451E32E0CE34DABCB77AFD3C81D</PropertyValue><PropertyValue name="Item16.Name">Text:   // Create check boxes for all countries
  let infos = countries () |&gt; Array.toList |&gt; List.mapi (fun index country -&gt;
    let input = jQuery("&lt;input&gt;")
    input.attr("type", "checkbox") |&gt; ignore
    let label = jQuery("&lt;label&gt;")
    label.append([| box input |]) |&gt; ignore
    label.append([| box country.Name |]) |&gt; ignore
    let panel = floor (index % 3) + 1
    label.appendTo(jQuery("#countryList" + panel.ToString())) |&gt; ignore
    country, input )
</PropertyValue><PropertyValue name="Item16.UseDefaultName">true</PropertyValue><PropertyValue name="Item16.Tab">2 World Bank</PropertyValue><PropertyValue name="Item16.TabID">2 World Bank</PropertyValue><PropertyValue name="Item16.OriginalTabID">2 World Bank</PropertyValue><PropertyValue name="Item16.OriginalTab">2 World Bank</PropertyValue><PropertyValue name="Item16.RecordType">1</PropertyValue><PropertyValue name="Item16.Data">  // Create check boxes for all countries
  let infos = countries () |&gt; Array.toList |&gt; List.mapi (fun index country -&gt;
    let input = jQuery("&lt;input&gt;")
    input.attr("type", "checkbox") |&gt; ignore
    let label = jQuery("&lt;label&gt;")
    label.append([| box input |]) |&gt; ignore
    label.append([| box country.Name |]) |&gt; ignore
    let panel = floor (index % 3) + 1
    label.appendTo(jQuery("#countryList" + panel.ToString())) |&gt; ignore
    country, input )
</PropertyValue><PropertyValue name="Item16.Position">3</PropertyValue><PropertyValue name="Item17.DataProvider">{0A057BAD-6706-45D2-A800-683A29EC6BA3}</PropertyValue><PropertyValue name="Item17.ID">BE91B9BFC20695CC7B449AB773D4B779</PropertyValue><PropertyValue name="Item17.Name">Text:   // Render the chart based on checkboxes
  let render () = 
    let opts = h.HighchartsOptions()
    opts.chart &lt;- h.HighchartsChartOptions(renderTo = "chart", ``type`` = "line")
    opts.title &lt;- h.HighchartsTitleOptions(text = "School enrollment, tertiary (% gross)")
    opts.series &lt;- [| |]
   
    // TODO: Iterate over infos, if is(":checked") then get values
    // DEMO: Convert values to Highcharts format
    // TODO: push new series to opts.series, with data &amp; name properties
    clone(h.Highcharts.Chart, opts) |&gt; ignore 
</PropertyValue><PropertyValue name="Item17.UseDefaultName">true</PropertyValue><PropertyValue name="Item17.Tab">2 World Bank</PropertyValue><PropertyValue name="Item17.TabID">2 World Bank</PropertyValue><PropertyValue name="Item17.OriginalTabID">2 World Bank</PropertyValue><PropertyValue name="Item17.OriginalTab">2 World Bank</PropertyValue><PropertyValue name="Item17.RecordType">1</PropertyValue><PropertyValue name="Item17.Data">  // Render the chart based on checkboxes
  let render () = 
    let opts = h.HighchartsOptions()
    opts.chart &lt;- h.HighchartsChartOptions(renderTo = "chart", ``type`` = "line")
    opts.title &lt;- h.HighchartsTitleOptions(text = "School enrollment, tertiary (% gross)")
    opts.series &lt;- [| |]
   
    // TODO: Iterate over infos, if is(":checked") then get values
    // DEMO: Convert values to Highcharts format
    // TODO: push new series to opts.series, with data &amp; name properties
    clone(h.Highcharts.Chart, opts) |&gt; ignore 
</PropertyValue><PropertyValue name="Item17.Position">4</PropertyValue><PropertyValue name="Item18.DataProvider">{0A057BAD-6706-45D2-A800-683A29EC6BA3}</PropertyValue><PropertyValue name="Item18.ID">14255BA82641E5D87DDE12BBF8C86222</PropertyValue><PropertyValue name="Item18.Name">Text:   // Register click handlers
  render () 
  for _, check in infos do
    check.click(fun _ -&gt; 
      render() |&gt; box) |&gt; ignore
</PropertyValue><PropertyValue name="Item18.UseDefaultName">true</PropertyValue><PropertyValue name="Item18.Tab">2 World Bank</PropertyValue><PropertyValue name="Item18.TabID">2 World Bank</PropertyValue><PropertyValue name="Item18.OriginalTabID">2 World Bank</PropertyValue><PropertyValue name="Item18.OriginalTab">2 World Bank</PropertyValue><PropertyValue name="Item18.RecordType">1</PropertyValue><PropertyValue name="Item18.Data">  // Register click handlers
  render () 
  for _, check in infos do
    check.click(fun _ -&gt; 
      render() |&gt; box) |&gt; ignore
</PropertyValue><PropertyValue name="Item18.Position">5</PropertyValue><PropertyValue name="Item19.DataProvider">{0A057BAD-6706-45D2-A800-683A29EC6BA3}</PropertyValue><PropertyValue name="Item19.ID">399A3C634071C17196E14E3428665918</PropertyValue><PropertyValue name="Item19.Name">Text:         // Convert vals to data expected by Highchart
        let data = vals |&gt; Seq.map (fun (k, v) -&gt; [| number k; number v |]) |&gt; Array.ofSeq
</PropertyValue><PropertyValue name="Item19.UseDefaultName">true</PropertyValue><PropertyValue name="Item19.Tab">2 World Bank</PropertyValue><PropertyValue name="Item19.TabID">2 World Bank</PropertyValue><PropertyValue name="Item19.OriginalTabID">2 World Bank</PropertyValue><PropertyValue name="Item19.OriginalTab">2 World Bank</PropertyValue><PropertyValue name="Item19.RecordType">1</PropertyValue><PropertyValue name="Item19.Data">        // Convert vals to data expected by Highchart
        let data = vals |&gt; Seq.map (fun (k, v) -&gt; [| number k; number v |]) |&gt; Array.ofSeq
</PropertyValue><PropertyValue name="Item19.Position">6</PropertyValue><PropertyValue name="Item20.DataProvider">{0A057BAD-6706-45D2-A800-683A29EC6BA3}</PropertyValue><PropertyValue name="Item20.ID">99B8C7DFE39FF7ACDEE0B9226E7EEF83</PropertyValue><PropertyValue name="Item20.Name">Text:         opts.series.push(h.HighchartsSeriesOptions(data=data, name=country.Name))
</PropertyValue><PropertyValue name="Item20.UseDefaultName">true</PropertyValue><PropertyValue name="Item20.Tab">2 World Bank</PropertyValue><PropertyValue name="Item20.TabID">2 World Bank</PropertyValue><PropertyValue name="Item20.OriginalTabID">2 World Bank</PropertyValue><PropertyValue name="Item20.OriginalTab">2 World Bank</PropertyValue><PropertyValue name="Item20.RecordType">1</PropertyValue><PropertyValue name="Item20.Data">        opts.series.push(h.HighchartsSeriesOptions(data=data, name=country.Name))
</PropertyValue><PropertyValue name="Item20.Position">7</PropertyValue><PropertyValue name="ItemCount">21</PropertyValue></Category></Category></UserSettings>